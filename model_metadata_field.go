/*
External API

## Date type fields API endpoints expected date in UTCÂ±0:00 timezone. Timezones in ISO8601 format will be ignored. API endpoints support date in two formats (one of): ISO8601 ('YYYY-MM-DDTHH:mm:SSZ') or Unix Timestamp (seconds count since January 1st, 1970 at UTC).  ## Dropdown fields Some fields are configured as dropdown fields with a dedicated list of values within Oomnitza. You can review the list of available dropdown values within the customization page in Oomnitza. In case you want to be able to post any data into these fields, you should switch them to dropdown without value within the customization page. 

API version: 3.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MetadataField struct for MetadataField
type MetadataField struct {
	InternalId NullableString `json:"internal_id,omitempty"`
	Uid string `json:"uid"`
	Label NullableString `json:"label,omitempty"`
	BelongsTo NullableString `json:"belongs_to,omitempty"`
	DataType NullableString `json:"data_type,omitempty"`
	Subtype NullableString `json:"subtype,omitempty"`
	Length NullableInt32 `json:"length,omitempty"`
	Editable NullableString `json:"editable,omitempty"`
	Hardcode NullableString `json:"hardcode,omitempty"`
	Optional NullableString `json:"optional,omitempty"`
	DisplayOrder NullableString `json:"display_order,omitempty"`
	DefaultValue NullableString `json:"default_value,omitempty"`
	Unique string `json:"unique"`
	Searchhelp []MetadataFieldSearchhelpInner `json:"searchhelp,omitempty"`
	SearchhelpType NullableString `json:"searchhelp_type,omitempty"`
	HelpText NullableString `json:"help_text,omitempty"`
	Dependencies NullableMetadataFieldDependencies `json:"dependencies,omitempty"`
	Flags map[string]interface{} `json:"flags,omitempty"`
	DropdownHelpTextEnabled string `json:"dropdown_help_text_enabled"`
}

// NewMetadataField instantiates a new MetadataField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataField(uid string, unique string, dropdownHelpTextEnabled string) *MetadataField {
	this := MetadataField{}
	this.Uid = uid
	this.Unique = unique
	this.DropdownHelpTextEnabled = dropdownHelpTextEnabled
	return &this
}

// NewMetadataFieldWithDefaults instantiates a new MetadataField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataFieldWithDefaults() *MetadataField {
	this := MetadataField{}
	return &this
}

// GetInternalId returns the InternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetInternalId() string {
	if o == nil || o.InternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InternalId.Get()
}

// GetInternalIdOk returns a tuple with the InternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetInternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternalId.Get(), o.InternalId.IsSet()
}

// HasInternalId returns a boolean if a field has been set.
func (o *MetadataField) HasInternalId() bool {
	if o != nil && o.InternalId.IsSet() {
		return true
	}

	return false
}

// SetInternalId gets a reference to the given NullableString and assigns it to the InternalId field.
func (o *MetadataField) SetInternalId(v string) {
	o.InternalId.Set(&v)
}
// SetInternalIdNil sets the value for InternalId to be an explicit nil
func (o *MetadataField) SetInternalIdNil() {
	o.InternalId.Set(nil)
}

// UnsetInternalId ensures that no value is present for InternalId, not even an explicit nil
func (o *MetadataField) UnsetInternalId() {
	o.InternalId.Unset()
}

// GetUid returns the Uid field value
func (o *MetadataField) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *MetadataField) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *MetadataField) SetUid(v string) {
	o.Uid = v
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetLabel() string {
	if o == nil || o.Label.Get() == nil {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *MetadataField) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *MetadataField) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *MetadataField) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *MetadataField) UnsetLabel() {
	o.Label.Unset()
}

// GetBelongsTo returns the BelongsTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetBelongsTo() string {
	if o == nil || o.BelongsTo.Get() == nil {
		var ret string
		return ret
	}
	return *o.BelongsTo.Get()
}

// GetBelongsToOk returns a tuple with the BelongsTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetBelongsToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BelongsTo.Get(), o.BelongsTo.IsSet()
}

// HasBelongsTo returns a boolean if a field has been set.
func (o *MetadataField) HasBelongsTo() bool {
	if o != nil && o.BelongsTo.IsSet() {
		return true
	}

	return false
}

// SetBelongsTo gets a reference to the given NullableString and assigns it to the BelongsTo field.
func (o *MetadataField) SetBelongsTo(v string) {
	o.BelongsTo.Set(&v)
}
// SetBelongsToNil sets the value for BelongsTo to be an explicit nil
func (o *MetadataField) SetBelongsToNil() {
	o.BelongsTo.Set(nil)
}

// UnsetBelongsTo ensures that no value is present for BelongsTo, not even an explicit nil
func (o *MetadataField) UnsetBelongsTo() {
	o.BelongsTo.Unset()
}

// GetDataType returns the DataType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetDataType() string {
	if o == nil || o.DataType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DataType.Get()
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataType.Get(), o.DataType.IsSet()
}

// HasDataType returns a boolean if a field has been set.
func (o *MetadataField) HasDataType() bool {
	if o != nil && o.DataType.IsSet() {
		return true
	}

	return false
}

// SetDataType gets a reference to the given NullableString and assigns it to the DataType field.
func (o *MetadataField) SetDataType(v string) {
	o.DataType.Set(&v)
}
// SetDataTypeNil sets the value for DataType to be an explicit nil
func (o *MetadataField) SetDataTypeNil() {
	o.DataType.Set(nil)
}

// UnsetDataType ensures that no value is present for DataType, not even an explicit nil
func (o *MetadataField) UnsetDataType() {
	o.DataType.Unset()
}

// GetSubtype returns the Subtype field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetSubtype() string {
	if o == nil || o.Subtype.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subtype.Get()
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetSubtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subtype.Get(), o.Subtype.IsSet()
}

// HasSubtype returns a boolean if a field has been set.
func (o *MetadataField) HasSubtype() bool {
	if o != nil && o.Subtype.IsSet() {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given NullableString and assigns it to the Subtype field.
func (o *MetadataField) SetSubtype(v string) {
	o.Subtype.Set(&v)
}
// SetSubtypeNil sets the value for Subtype to be an explicit nil
func (o *MetadataField) SetSubtypeNil() {
	o.Subtype.Set(nil)
}

// UnsetSubtype ensures that no value is present for Subtype, not even an explicit nil
func (o *MetadataField) UnsetSubtype() {
	o.Subtype.Unset()
}

// GetLength returns the Length field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetLength() int32 {
	if o == nil || o.Length.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Length.Get()
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Length.Get(), o.Length.IsSet()
}

// HasLength returns a boolean if a field has been set.
func (o *MetadataField) HasLength() bool {
	if o != nil && o.Length.IsSet() {
		return true
	}

	return false
}

// SetLength gets a reference to the given NullableInt32 and assigns it to the Length field.
func (o *MetadataField) SetLength(v int32) {
	o.Length.Set(&v)
}
// SetLengthNil sets the value for Length to be an explicit nil
func (o *MetadataField) SetLengthNil() {
	o.Length.Set(nil)
}

// UnsetLength ensures that no value is present for Length, not even an explicit nil
func (o *MetadataField) UnsetLength() {
	o.Length.Unset()
}

// GetEditable returns the Editable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetEditable() string {
	if o == nil || o.Editable.Get() == nil {
		var ret string
		return ret
	}
	return *o.Editable.Get()
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetEditableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Editable.Get(), o.Editable.IsSet()
}

// HasEditable returns a boolean if a field has been set.
func (o *MetadataField) HasEditable() bool {
	if o != nil && o.Editable.IsSet() {
		return true
	}

	return false
}

// SetEditable gets a reference to the given NullableString and assigns it to the Editable field.
func (o *MetadataField) SetEditable(v string) {
	o.Editable.Set(&v)
}
// SetEditableNil sets the value for Editable to be an explicit nil
func (o *MetadataField) SetEditableNil() {
	o.Editable.Set(nil)
}

// UnsetEditable ensures that no value is present for Editable, not even an explicit nil
func (o *MetadataField) UnsetEditable() {
	o.Editable.Unset()
}

// GetHardcode returns the Hardcode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetHardcode() string {
	if o == nil || o.Hardcode.Get() == nil {
		var ret string
		return ret
	}
	return *o.Hardcode.Get()
}

// GetHardcodeOk returns a tuple with the Hardcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetHardcodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hardcode.Get(), o.Hardcode.IsSet()
}

// HasHardcode returns a boolean if a field has been set.
func (o *MetadataField) HasHardcode() bool {
	if o != nil && o.Hardcode.IsSet() {
		return true
	}

	return false
}

// SetHardcode gets a reference to the given NullableString and assigns it to the Hardcode field.
func (o *MetadataField) SetHardcode(v string) {
	o.Hardcode.Set(&v)
}
// SetHardcodeNil sets the value for Hardcode to be an explicit nil
func (o *MetadataField) SetHardcodeNil() {
	o.Hardcode.Set(nil)
}

// UnsetHardcode ensures that no value is present for Hardcode, not even an explicit nil
func (o *MetadataField) UnsetHardcode() {
	o.Hardcode.Unset()
}

// GetOptional returns the Optional field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetOptional() string {
	if o == nil || o.Optional.Get() == nil {
		var ret string
		return ret
	}
	return *o.Optional.Get()
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetOptionalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Optional.Get(), o.Optional.IsSet()
}

// HasOptional returns a boolean if a field has been set.
func (o *MetadataField) HasOptional() bool {
	if o != nil && o.Optional.IsSet() {
		return true
	}

	return false
}

// SetOptional gets a reference to the given NullableString and assigns it to the Optional field.
func (o *MetadataField) SetOptional(v string) {
	o.Optional.Set(&v)
}
// SetOptionalNil sets the value for Optional to be an explicit nil
func (o *MetadataField) SetOptionalNil() {
	o.Optional.Set(nil)
}

// UnsetOptional ensures that no value is present for Optional, not even an explicit nil
func (o *MetadataField) UnsetOptional() {
	o.Optional.Unset()
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetDisplayOrder() string {
	if o == nil || o.DisplayOrder.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayOrder.Get()
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetDisplayOrderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayOrder.Get(), o.DisplayOrder.IsSet()
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *MetadataField) HasDisplayOrder() bool {
	if o != nil && o.DisplayOrder.IsSet() {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given NullableString and assigns it to the DisplayOrder field.
func (o *MetadataField) SetDisplayOrder(v string) {
	o.DisplayOrder.Set(&v)
}
// SetDisplayOrderNil sets the value for DisplayOrder to be an explicit nil
func (o *MetadataField) SetDisplayOrderNil() {
	o.DisplayOrder.Set(nil)
}

// UnsetDisplayOrder ensures that no value is present for DisplayOrder, not even an explicit nil
func (o *MetadataField) UnsetDisplayOrder() {
	o.DisplayOrder.Unset()
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetDefaultValue() string {
	if o == nil || o.DefaultValue.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *MetadataField) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *MetadataField) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *MetadataField) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *MetadataField) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetUnique returns the Unique field value
func (o *MetadataField) GetUnique() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value
// and a boolean to check if the value has been set.
func (o *MetadataField) GetUniqueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unique, true
}

// SetUnique sets field value
func (o *MetadataField) SetUnique(v string) {
	o.Unique = v
}

// GetSearchhelp returns the Searchhelp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetSearchhelp() []MetadataFieldSearchhelpInner {
	if o == nil {
		var ret []MetadataFieldSearchhelpInner
		return ret
	}
	return o.Searchhelp
}

// GetSearchhelpOk returns a tuple with the Searchhelp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetSearchhelpOk() ([]MetadataFieldSearchhelpInner, bool) {
	if o == nil || o.Searchhelp == nil {
		return nil, false
	}
	return o.Searchhelp, true
}

// HasSearchhelp returns a boolean if a field has been set.
func (o *MetadataField) HasSearchhelp() bool {
	if o != nil && o.Searchhelp != nil {
		return true
	}

	return false
}

// SetSearchhelp gets a reference to the given []MetadataFieldSearchhelpInner and assigns it to the Searchhelp field.
func (o *MetadataField) SetSearchhelp(v []MetadataFieldSearchhelpInner) {
	o.Searchhelp = v
}

// GetSearchhelpType returns the SearchhelpType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetSearchhelpType() string {
	if o == nil || o.SearchhelpType.Get() == nil {
		var ret string
		return ret
	}
	return *o.SearchhelpType.Get()
}

// GetSearchhelpTypeOk returns a tuple with the SearchhelpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetSearchhelpTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchhelpType.Get(), o.SearchhelpType.IsSet()
}

// HasSearchhelpType returns a boolean if a field has been set.
func (o *MetadataField) HasSearchhelpType() bool {
	if o != nil && o.SearchhelpType.IsSet() {
		return true
	}

	return false
}

// SetSearchhelpType gets a reference to the given NullableString and assigns it to the SearchhelpType field.
func (o *MetadataField) SetSearchhelpType(v string) {
	o.SearchhelpType.Set(&v)
}
// SetSearchhelpTypeNil sets the value for SearchhelpType to be an explicit nil
func (o *MetadataField) SetSearchhelpTypeNil() {
	o.SearchhelpType.Set(nil)
}

// UnsetSearchhelpType ensures that no value is present for SearchhelpType, not even an explicit nil
func (o *MetadataField) UnsetSearchhelpType() {
	o.SearchhelpType.Unset()
}

// GetHelpText returns the HelpText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetHelpText() string {
	if o == nil || o.HelpText.Get() == nil {
		var ret string
		return ret
	}
	return *o.HelpText.Get()
}

// GetHelpTextOk returns a tuple with the HelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetHelpTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HelpText.Get(), o.HelpText.IsSet()
}

// HasHelpText returns a boolean if a field has been set.
func (o *MetadataField) HasHelpText() bool {
	if o != nil && o.HelpText.IsSet() {
		return true
	}

	return false
}

// SetHelpText gets a reference to the given NullableString and assigns it to the HelpText field.
func (o *MetadataField) SetHelpText(v string) {
	o.HelpText.Set(&v)
}
// SetHelpTextNil sets the value for HelpText to be an explicit nil
func (o *MetadataField) SetHelpTextNil() {
	o.HelpText.Set(nil)
}

// UnsetHelpText ensures that no value is present for HelpText, not even an explicit nil
func (o *MetadataField) UnsetHelpText() {
	o.HelpText.Unset()
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetDependencies() MetadataFieldDependencies {
	if o == nil || o.Dependencies.Get() == nil {
		var ret MetadataFieldDependencies
		return ret
	}
	return *o.Dependencies.Get()
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetDependenciesOk() (*MetadataFieldDependencies, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dependencies.Get(), o.Dependencies.IsSet()
}

// HasDependencies returns a boolean if a field has been set.
func (o *MetadataField) HasDependencies() bool {
	if o != nil && o.Dependencies.IsSet() {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given NullableMetadataFieldDependencies and assigns it to the Dependencies field.
func (o *MetadataField) SetDependencies(v MetadataFieldDependencies) {
	o.Dependencies.Set(&v)
}
// SetDependenciesNil sets the value for Dependencies to be an explicit nil
func (o *MetadataField) SetDependenciesNil() {
	o.Dependencies.Set(nil)
}

// UnsetDependencies ensures that no value is present for Dependencies, not even an explicit nil
func (o *MetadataField) UnsetDependencies() {
	o.Dependencies.Unset()
}

// GetFlags returns the Flags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetadataField) GetFlags() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetadataField) GetFlagsOk() (map[string]interface{}, bool) {
	if o == nil || o.Flags == nil {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *MetadataField) HasFlags() bool {
	if o != nil && o.Flags != nil {
		return true
	}

	return false
}

// SetFlags gets a reference to the given map[string]interface{} and assigns it to the Flags field.
func (o *MetadataField) SetFlags(v map[string]interface{}) {
	o.Flags = v
}

// GetDropdownHelpTextEnabled returns the DropdownHelpTextEnabled field value
func (o *MetadataField) GetDropdownHelpTextEnabled() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DropdownHelpTextEnabled
}

// GetDropdownHelpTextEnabledOk returns a tuple with the DropdownHelpTextEnabled field value
// and a boolean to check if the value has been set.
func (o *MetadataField) GetDropdownHelpTextEnabledOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DropdownHelpTextEnabled, true
}

// SetDropdownHelpTextEnabled sets field value
func (o *MetadataField) SetDropdownHelpTextEnabled(v string) {
	o.DropdownHelpTextEnabled = v
}

func (o MetadataField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InternalId.IsSet() {
		toSerialize["internal_id"] = o.InternalId.Get()
	}
	if true {
		toSerialize["uid"] = o.Uid
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.BelongsTo.IsSet() {
		toSerialize["belongs_to"] = o.BelongsTo.Get()
	}
	if o.DataType.IsSet() {
		toSerialize["data_type"] = o.DataType.Get()
	}
	if o.Subtype.IsSet() {
		toSerialize["subtype"] = o.Subtype.Get()
	}
	if o.Length.IsSet() {
		toSerialize["length"] = o.Length.Get()
	}
	if o.Editable.IsSet() {
		toSerialize["editable"] = o.Editable.Get()
	}
	if o.Hardcode.IsSet() {
		toSerialize["hardcode"] = o.Hardcode.Get()
	}
	if o.Optional.IsSet() {
		toSerialize["optional"] = o.Optional.Get()
	}
	if o.DisplayOrder.IsSet() {
		toSerialize["display_order"] = o.DisplayOrder.Get()
	}
	if o.DefaultValue.IsSet() {
		toSerialize["default_value"] = o.DefaultValue.Get()
	}
	if true {
		toSerialize["unique"] = o.Unique
	}
	if o.Searchhelp != nil {
		toSerialize["searchhelp"] = o.Searchhelp
	}
	if o.SearchhelpType.IsSet() {
		toSerialize["searchhelp_type"] = o.SearchhelpType.Get()
	}
	if o.HelpText.IsSet() {
		toSerialize["help_text"] = o.HelpText.Get()
	}
	if o.Dependencies.IsSet() {
		toSerialize["dependencies"] = o.Dependencies.Get()
	}
	if o.Flags != nil {
		toSerialize["flags"] = o.Flags
	}
	if true {
		toSerialize["dropdown_help_text_enabled"] = o.DropdownHelpTextEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableMetadataField struct {
	value *MetadataField
	isSet bool
}

func (v NullableMetadataField) Get() *MetadataField {
	return v.value
}

func (v *NullableMetadataField) Set(val *MetadataField) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataField) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataField(val *MetadataField) *NullableMetadataField {
	return &NullableMetadataField{value: val, isSet: true}
}

func (v NullableMetadataField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


