/*
External API

## Date type fields API endpoints expected date in UTCÂ±0:00 timezone. Timezones in ISO8601 format will be ignored. API endpoints support date in two formats (one of): ISO8601 ('YYYY-MM-DDTHH:mm:SSZ') or Unix Timestamp (seconds count since January 1st, 1970 at UTC).  ## Dropdown fields Some fields are configured as dropdown fields with a dedicated list of values within Oomnitza. You can review the list of available dropdown values within the customization page in Oomnitza. In case you want to be able to post any data into these fields, you should switch them to dropdown without value within the customization page. 

API version: 3.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserAssignedSaaS struct for UserAssignedSaaS
type UserAssignedSaaS struct {
	AssignedContractId string `json:"assigned_contract_id"`
	AvailableContracts []UserAssignedSaaSAvailableContractsInner `json:"available_contracts"`
	Roles []SaaSAssignedUserRoles `json:"roles"`
	EstimatedSpend int32 `json:"estimated_spend"`
	SaasId string `json:"saas_id"`
	SaasName string `json:"saas_name"`
	Uid int32 `json:"uid"`
}

// NewUserAssignedSaaS instantiates a new UserAssignedSaaS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAssignedSaaS(assignedContractId string, availableContracts []UserAssignedSaaSAvailableContractsInner, roles []SaaSAssignedUserRoles, estimatedSpend int32, saasId string, saasName string, uid int32) *UserAssignedSaaS {
	this := UserAssignedSaaS{}
	this.AssignedContractId = assignedContractId
	this.AvailableContracts = availableContracts
	this.Roles = roles
	this.EstimatedSpend = estimatedSpend
	this.SaasId = saasId
	this.SaasName = saasName
	this.Uid = uid
	return &this
}

// NewUserAssignedSaaSWithDefaults instantiates a new UserAssignedSaaS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAssignedSaaSWithDefaults() *UserAssignedSaaS {
	this := UserAssignedSaaS{}
	return &this
}

// GetAssignedContractId returns the AssignedContractId field value
func (o *UserAssignedSaaS) GetAssignedContractId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssignedContractId
}

// GetAssignedContractIdOk returns a tuple with the AssignedContractId field value
// and a boolean to check if the value has been set.
func (o *UserAssignedSaaS) GetAssignedContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignedContractId, true
}

// SetAssignedContractId sets field value
func (o *UserAssignedSaaS) SetAssignedContractId(v string) {
	o.AssignedContractId = v
}

// GetAvailableContracts returns the AvailableContracts field value
func (o *UserAssignedSaaS) GetAvailableContracts() []UserAssignedSaaSAvailableContractsInner {
	if o == nil {
		var ret []UserAssignedSaaSAvailableContractsInner
		return ret
	}

	return o.AvailableContracts
}

// GetAvailableContractsOk returns a tuple with the AvailableContracts field value
// and a boolean to check if the value has been set.
func (o *UserAssignedSaaS) GetAvailableContractsOk() ([]UserAssignedSaaSAvailableContractsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailableContracts, true
}

// SetAvailableContracts sets field value
func (o *UserAssignedSaaS) SetAvailableContracts(v []UserAssignedSaaSAvailableContractsInner) {
	o.AvailableContracts = v
}

// GetRoles returns the Roles field value
func (o *UserAssignedSaaS) GetRoles() []SaaSAssignedUserRoles {
	if o == nil {
		var ret []SaaSAssignedUserRoles
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *UserAssignedSaaS) GetRolesOk() ([]SaaSAssignedUserRoles, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *UserAssignedSaaS) SetRoles(v []SaaSAssignedUserRoles) {
	o.Roles = v
}

// GetEstimatedSpend returns the EstimatedSpend field value
func (o *UserAssignedSaaS) GetEstimatedSpend() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EstimatedSpend
}

// GetEstimatedSpendOk returns a tuple with the EstimatedSpend field value
// and a boolean to check if the value has been set.
func (o *UserAssignedSaaS) GetEstimatedSpendOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedSpend, true
}

// SetEstimatedSpend sets field value
func (o *UserAssignedSaaS) SetEstimatedSpend(v int32) {
	o.EstimatedSpend = v
}

// GetSaasId returns the SaasId field value
func (o *UserAssignedSaaS) GetSaasId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SaasId
}

// GetSaasIdOk returns a tuple with the SaasId field value
// and a boolean to check if the value has been set.
func (o *UserAssignedSaaS) GetSaasIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaasId, true
}

// SetSaasId sets field value
func (o *UserAssignedSaaS) SetSaasId(v string) {
	o.SaasId = v
}

// GetSaasName returns the SaasName field value
func (o *UserAssignedSaaS) GetSaasName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SaasName
}

// GetSaasNameOk returns a tuple with the SaasName field value
// and a boolean to check if the value has been set.
func (o *UserAssignedSaaS) GetSaasNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaasName, true
}

// SetSaasName sets field value
func (o *UserAssignedSaaS) SetSaasName(v string) {
	o.SaasName = v
}

// GetUid returns the Uid field value
func (o *UserAssignedSaaS) GetUid() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *UserAssignedSaaS) GetUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *UserAssignedSaaS) SetUid(v int32) {
	o.Uid = v
}

func (o UserAssignedSaaS) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assigned_contract_id"] = o.AssignedContractId
	}
	if true {
		toSerialize["available_contracts"] = o.AvailableContracts
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	if true {
		toSerialize["estimated_spend"] = o.EstimatedSpend
	}
	if true {
		toSerialize["saas_id"] = o.SaasId
	}
	if true {
		toSerialize["saas_name"] = o.SaasName
	}
	if true {
		toSerialize["uid"] = o.Uid
	}
	return json.Marshal(toSerialize)
}

type NullableUserAssignedSaaS struct {
	value *UserAssignedSaaS
	isSet bool
}

func (v NullableUserAssignedSaaS) Get() *UserAssignedSaaS {
	return v.value
}

func (v *NullableUserAssignedSaaS) Set(val *UserAssignedSaaS) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAssignedSaaS) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAssignedSaaS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAssignedSaaS(val *UserAssignedSaaS) *NullableUserAssignedSaaS {
	return &NullableUserAssignedSaaS{value: val, isSet: true}
}

func (v NullableUserAssignedSaaS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAssignedSaaS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


